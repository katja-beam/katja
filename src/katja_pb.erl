%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.6.0
-module(katja_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([encode/1]). %% epb compatibility
-export([encode_riemannpb_state/1]).
-export([encode_riemannpb_event/1]).
-export([encode_riemannpb_query/1]).
-export([encode_riemannpb_msg/1]).
-export([encode_riemannpb_attribute/1]).

-export([decode_msg/2, decode_msg/3]).
-export([decode/2]). %% epb compatibility
-export([decode_riemannpb_state/1]).
-export([decode_riemannpb_event/1]).
-export([decode_riemannpb_query/1]).
-export([decode_riemannpb_msg/1]).
-export([decode_riemannpb_attribute/1]).

-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("katja_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type riemannpb_state() :: #riemannpb_state{}.

-type riemannpb_event() :: #riemannpb_event{}.

-type riemannpb_query() :: #riemannpb_query{}.

-type riemannpb_msg() :: #riemannpb_msg{}.

-type riemannpb_attribute() :: #riemannpb_attribute{}.

-export_type(['riemannpb_state'/0, 'riemannpb_event'/0, 'riemannpb_query'/0, 'riemannpb_msg'/0, 'riemannpb_attribute'/0]).

-spec encode_msg(#riemannpb_state{} | #riemannpb_event{} | #riemannpb_query{} | #riemannpb_msg{} | #riemannpb_attribute{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#riemannpb_state{} | #riemannpb_event{} | #riemannpb_query{} | #riemannpb_msg{} | #riemannpb_attribute{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#riemannpb_state{} | #riemannpb_event{} | #riemannpb_query{} | #riemannpb_msg{} | #riemannpb_attribute{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      riemannpb_state ->
	  encode_msg_riemannpb_state(id(Msg, TrUserData),
				     TrUserData);
      riemannpb_event ->
	  encode_msg_riemannpb_event(id(Msg, TrUserData),
				     TrUserData);
      riemannpb_query ->
	  encode_msg_riemannpb_query(id(Msg, TrUserData),
				     TrUserData);
      riemannpb_msg ->
	  encode_msg_riemannpb_msg(id(Msg, TrUserData),
				   TrUserData);
      riemannpb_attribute ->
	  encode_msg_riemannpb_attribute(id(Msg, TrUserData),
					 TrUserData)
    end.

%% epb compatibility
-spec encode(_) -> binary().
encode(Msg) -> encode_msg(Msg).

-spec encode_riemannpb_state(_) -> binary().
encode_riemannpb_state(Msg) -> encode_msg(Msg).

-spec encode_riemannpb_event(_) -> binary().
encode_riemannpb_event(Msg) -> encode_msg(Msg).

-spec encode_riemannpb_query(_) -> binary().
encode_riemannpb_query(Msg) -> encode_msg(Msg).

-spec encode_riemannpb_msg(_) -> binary().
encode_riemannpb_msg(Msg) -> encode_msg(Msg).

-spec encode_riemannpb_attribute(_) -> binary().
encode_riemannpb_attribute(Msg) -> encode_msg(Msg).


encode_msg_riemannpb_state(Msg, TrUserData) ->
    encode_msg_riemannpb_state(Msg, <<>>, TrUserData).


encode_msg_riemannpb_state(#riemannpb_state{time = F1,
					    state = F2, service = F3, host = F4,
					    description = F5, once = F6,
					    tags = F7, ttl = F8},
			   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_bool(TrF6, <<B5/binary, 48>>, TrUserData)
		end
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   if TrF7 == [] -> B6;
	      true ->
		  e_field_riemannpb_state_tags(TrF7, B6, TrUserData)
	   end
	 end,
    if F8 == undefined -> B7;
       true ->
	   begin
	     TrF8 = id(F8, TrUserData),
	     e_type_float(TrF8, <<B7/binary, 69>>, TrUserData)
	   end
    end.

encode_msg_riemannpb_event(Msg, TrUserData) ->
    encode_msg_riemannpb_event(Msg, <<>>, TrUserData).


encode_msg_riemannpb_event(#riemannpb_event{time = F1,
					    state = F2, service = F3, host = F4,
					    description = F5, tags = F6,
					    ttl = F7, attributes = F8,
					    time_micros = F9,
					    metric_sint64 = F10, metric_d = F11,
					    metric_f = F12},
			   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true ->
		  e_field_riemannpb_event_tags(TrF6, B5, TrUserData)
	   end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_float(TrF7, <<B6/binary, 69>>, TrUserData)
		end
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   if TrF8 == [] -> B7;
	      true ->
		  e_field_riemannpb_event_attributes(TrF8, B7, TrUserData)
	   end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_int64(TrF9, <<B8/binary, 80>>, TrUserData)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_type_sint(TrF10, <<B9/binary, 104>>, TrUserData)
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_type_double(TrF11, <<B10/binary, 113>>, TrUserData)
		 end
	  end,
    if F12 == undefined -> B11;
       true ->
	   begin
	     TrF12 = id(F12, TrUserData),
	     e_type_float(TrF12, <<B11/binary, 125>>, TrUserData)
	   end
    end.

encode_msg_riemannpb_query(Msg, TrUserData) ->
    encode_msg_riemannpb_query(Msg, <<>>, TrUserData).


encode_msg_riemannpb_query(#riemannpb_query{string =
						F1},
			   Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	   end
    end.

encode_msg_riemannpb_msg(Msg, TrUserData) ->
    encode_msg_riemannpb_msg(Msg, <<>>, TrUserData).


encode_msg_riemannpb_msg(#riemannpb_msg{ok = F1,
					error = F2, states = F3, query = F4,
					events = F5},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_bool(TrF1, <<Bin/binary, 16>>, TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 26>>, TrUserData)
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_riemannpb_msg_states(TrF3, B2, TrUserData)
	   end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_riemannpb_msg_query(TrF4, <<B3/binary, 42>>,
					       TrUserData)
		end
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      if TrF5 == [] -> B4;
	 true ->
	     e_field_riemannpb_msg_events(TrF5, B4, TrUserData)
      end
    end.

encode_msg_riemannpb_attribute(Msg, TrUserData) ->
    encode_msg_riemannpb_attribute(Msg, <<>>, TrUserData).


encode_msg_riemannpb_attribute(#riemannpb_attribute{key
							= F1,
						    value = F2},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	   end
    end.

e_field_riemannpb_state_tags([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_riemannpb_state_tags(Rest, Bin3, TrUserData);
e_field_riemannpb_state_tags([], Bin, _TrUserData) ->
    Bin.

e_field_riemannpb_event_tags([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_riemannpb_event_tags(Rest, Bin3, TrUserData);
e_field_riemannpb_event_tags([], Bin, _TrUserData) ->
    Bin.

e_mfield_riemannpb_event_attributes(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_riemannpb_attribute(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_riemannpb_event_attributes([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 74>>,
    Bin3 = e_mfield_riemannpb_event_attributes(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    e_field_riemannpb_event_attributes(Rest, Bin3,
				       TrUserData);
e_field_riemannpb_event_attributes([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_riemannpb_msg_states(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_riemannpb_state(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_riemannpb_msg_states([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_riemannpb_msg_states(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_riemannpb_msg_states(Rest, Bin3, TrUserData);
e_field_riemannpb_msg_states([], Bin, _TrUserData) ->
    Bin.

e_mfield_riemannpb_msg_query(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_riemannpb_query(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_riemannpb_msg_events(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_riemannpb_event(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_riemannpb_msg_events([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_riemannpb_msg_events(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_riemannpb_msg_events(Rest, Bin3, TrUserData);
e_field_riemannpb_msg_events([], Bin, _TrUserData) ->
    Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(riemannpb_state, Bin, TrUserData) ->
    id(decode_msg_riemannpb_state(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(riemannpb_event, Bin, TrUserData) ->
    id(decode_msg_riemannpb_event(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(riemannpb_query, Bin, TrUserData) ->
    id(decode_msg_riemannpb_query(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(riemannpb_msg, Bin, TrUserData) ->
    id(decode_msg_riemannpb_msg(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(riemannpb_attribute, Bin,
		  TrUserData) ->
    id(decode_msg_riemannpb_attribute(Bin, TrUserData),
       TrUserData).


%% epb compatibility
decode(MsgName, Bin)
    when is_atom(MsgName), is_binary(Bin) ->
    decode_msg(Bin, MsgName).

decode_riemannpb_state(Bin) when is_binary(Bin) ->
    decode_msg(Bin, riemannpb_state).

decode_riemannpb_event(Bin) when is_binary(Bin) ->
    decode_msg(Bin, riemannpb_event).

decode_riemannpb_query(Bin) when is_binary(Bin) ->
    decode_msg(Bin, riemannpb_query).

decode_riemannpb_msg(Bin) when is_binary(Bin) ->
    decode_msg(Bin, riemannpb_msg).

decode_riemannpb_attribute(Bin) when is_binary(Bin) ->
    decode_msg(Bin, riemannpb_attribute).



decode_msg_riemannpb_state(Bin, TrUserData) ->
    dfp_read_field_def_riemannpb_state(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id([], TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_riemannpb_state(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    d_field_riemannpb_state_time(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
dfp_read_field_def_riemannpb_state(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    d_field_riemannpb_state_state(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				  TrUserData);
dfp_read_field_def_riemannpb_state(<<26, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    d_field_riemannpb_state_service(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    TrUserData);
dfp_read_field_def_riemannpb_state(<<34, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    d_field_riemannpb_state_host(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
dfp_read_field_def_riemannpb_state(<<42, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    d_field_riemannpb_state_description(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, TrUserData);
dfp_read_field_def_riemannpb_state(<<48, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    d_field_riemannpb_state_once(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
dfp_read_field_def_riemannpb_state(<<58, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    d_field_riemannpb_state_tags(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
dfp_read_field_def_riemannpb_state(<<69, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    d_field_riemannpb_state_ttl(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_riemannpb_state(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, R1, F@_8,
				   TrUserData) ->
    #riemannpb_state{time = F@_1, state = F@_2,
		     service = F@_3, host = F@_4, description = F@_5,
		     once = F@_6, tags = lists_reverse(R1, TrUserData),
		     ttl = F@_8};
dfp_read_field_def_riemannpb_state(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   TrUserData) ->
    dg_read_field_def_riemannpb_state(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      TrUserData).

dg_read_field_def_riemannpb_state(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_riemannpb_state(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, TrUserData);
dg_read_field_def_riemannpb_state(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_riemannpb_state_time(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
      18 ->
	  d_field_riemannpb_state_state(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					TrUserData);
      26 ->
	  d_field_riemannpb_state_service(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  TrUserData);
      34 ->
	  d_field_riemannpb_state_host(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
      42 ->
	  d_field_riemannpb_state_description(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, TrUserData);
      48 ->
	  d_field_riemannpb_state_once(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
      58 ->
	  d_field_riemannpb_state_tags(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
      69 ->
	  d_field_riemannpb_state_ttl(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_riemannpb_state(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					    TrUserData);
	    1 ->
		skip_64_riemannpb_state(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, F@_7, F@_8,
					TrUserData);
	    2 ->
		skip_length_delimited_riemannpb_state(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      F@_6, F@_7, F@_8,
						      TrUserData);
	    3 ->
		skip_group_riemannpb_state(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					   F@_8, TrUserData);
	    5 ->
		skip_32_riemannpb_state(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, F@_7, F@_8,
					TrUserData)
	  end
    end;
dg_read_field_def_riemannpb_state(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, R1, F@_8,
				  TrUserData) ->
    #riemannpb_state{time = F@_1, state = F@_2,
		     service = F@_3, host = F@_4, description = F@_5,
		     once = F@_6, tags = lists_reverse(R1, TrUserData),
		     ttl = F@_8}.

d_field_riemannpb_state_time(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, TrUserData)
    when N < 57 ->
    d_field_riemannpb_state_time(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
d_field_riemannpb_state_time(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_riemannpb_state(RestF, 0, 0,
				       NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6,
				       F@_7, F@_8, TrUserData).

d_field_riemannpb_state_state(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, TrUserData)
    when N < 57 ->
    d_field_riemannpb_state_state(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, TrUserData);
d_field_riemannpb_state_state(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_state(RestF, 0, 0, F@_1,
				       NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				       F@_8, TrUserData).

d_field_riemannpb_state_service(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_riemannpb_state_service(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, TrUserData);
d_field_riemannpb_state_service(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
				F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_state(RestF, 0, 0, F@_1,
				       F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7,
				       F@_8, TrUserData).

d_field_riemannpb_state_host(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, TrUserData)
    when N < 57 ->
    d_field_riemannpb_state_host(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
d_field_riemannpb_state_host(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			     F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_state(RestF, 0, 0, F@_1,
				       F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7,
				       F@_8, TrUserData).

d_field_riemannpb_state_description(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_riemannpb_state_description(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_riemannpb_state_description(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				    F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_state(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7,
				       F@_8, TrUserData).

d_field_riemannpb_state_once(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, TrUserData)
    when N < 57 ->
    d_field_riemannpb_state_once(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
d_field_riemannpb_state_once(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
			     F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_riemannpb_state(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7,
				       F@_8, TrUserData).

d_field_riemannpb_state_tags(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, TrUserData)
    when N < 57 ->
    d_field_riemannpb_state_tags(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
d_field_riemannpb_state_tags(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev,
			     F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_state(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       cons(NewFValue, Prev, TrUserData), F@_8,
				       TrUserData).

d_field_riemannpb_state_ttl(<<0:16, 128, 127,
			      Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
			    TrUserData) ->
    dfp_read_field_def_riemannpb_state(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				       id(infinity, TrUserData), TrUserData);
d_field_riemannpb_state_ttl(<<0:16, 128, 255,
			      Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
			    TrUserData) ->
    dfp_read_field_def_riemannpb_state(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				       id('-infinity', TrUserData), TrUserData);
d_field_riemannpb_state_ttl(<<_:16, 1:1, _:7, _:1,
			      127:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
			    TrUserData) ->
    dfp_read_field_def_riemannpb_state(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				       id(nan, TrUserData), TrUserData);
d_field_riemannpb_state_ttl(<<Value:32/little-float,
			      Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
			    TrUserData) ->
    dfp_read_field_def_riemannpb_state(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				       id(Value, TrUserData), TrUserData).

skip_varint_riemannpb_state(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, TrUserData) ->
    skip_varint_riemannpb_state(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
skip_varint_riemannpb_state(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, TrUserData) ->
    dfp_read_field_def_riemannpb_state(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData).

skip_length_delimited_riemannpb_state(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    skip_length_delimited_riemannpb_state(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, TrUserData);
skip_length_delimited_riemannpb_state(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_riemannpb_state(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData).

skip_group_riemannpb_state(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_riemannpb_state(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData).

skip_32_riemannpb_state(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			TrUserData) ->
    dfp_read_field_def_riemannpb_state(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData).

skip_64_riemannpb_state(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			TrUserData) ->
    dfp_read_field_def_riemannpb_state(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData).

decode_msg_riemannpb_event(Bin, TrUserData) ->
    dfp_read_field_def_riemannpb_event(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id([], TrUserData),
				       id(undefined, TrUserData),
				       id([], TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_riemannpb_event(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   TrUserData) ->
    d_field_riemannpb_event_time(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, F@_11, F@_12, TrUserData);
dfp_read_field_def_riemannpb_event(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   TrUserData) ->
    d_field_riemannpb_event_state(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, TrUserData);
dfp_read_field_def_riemannpb_event(<<26, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   TrUserData) ->
    d_field_riemannpb_event_service(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, TrUserData);
dfp_read_field_def_riemannpb_event(<<34, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   TrUserData) ->
    d_field_riemannpb_event_host(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, F@_11, F@_12, TrUserData);
dfp_read_field_def_riemannpb_event(<<42, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   TrUserData) ->
    d_field_riemannpb_event_description(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, F@_12,
					TrUserData);
dfp_read_field_def_riemannpb_event(<<58, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   TrUserData) ->
    d_field_riemannpb_event_tags(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, F@_11, F@_12, TrUserData);
dfp_read_field_def_riemannpb_event(<<69, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   TrUserData) ->
    d_field_riemannpb_event_ttl(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, TrUserData);
dfp_read_field_def_riemannpb_event(<<74, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   TrUserData) ->
    d_field_riemannpb_event_attributes(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, F@_12, TrUserData);
dfp_read_field_def_riemannpb_event(<<80, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   TrUserData) ->
    d_field_riemannpb_event_time_micros(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, F@_12,
					TrUserData);
dfp_read_field_def_riemannpb_event(<<104, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   TrUserData) ->
    d_field_riemannpb_event_metric_sint64(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					  TrUserData);
dfp_read_field_def_riemannpb_event(<<113, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   TrUserData) ->
    d_field_riemannpb_event_metric_d(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, F@_12, TrUserData);
dfp_read_field_def_riemannpb_event(<<125, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   TrUserData) ->
    d_field_riemannpb_event_metric_f(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, F@_12, TrUserData);
dfp_read_field_def_riemannpb_event(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, F@_5, R1, F@_7, R2, F@_9,
				   F@_10, F@_11, F@_12, TrUserData) ->
    #riemannpb_event{time = F@_1, state = F@_2,
		     service = F@_3, host = F@_4, description = F@_5,
		     tags = lists_reverse(R1, TrUserData), ttl = F@_7,
		     attributes = lists_reverse(R2, TrUserData),
		     time_micros = F@_9, metric_sint64 = F@_10,
		     metric_d = F@_11, metric_f = F@_12};
dfp_read_field_def_riemannpb_event(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    dg_read_field_def_riemannpb_event(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, F@_11, F@_12, TrUserData).

dg_read_field_def_riemannpb_event(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_riemannpb_event(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      F@_11, F@_12, TrUserData);
dg_read_field_def_riemannpb_event(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_riemannpb_event_time(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, TrUserData);
      18 ->
	  d_field_riemannpb_event_state(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, TrUserData);
      26 ->
	  d_field_riemannpb_event_service(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, F@_11, F@_12,
					  TrUserData);
      34 ->
	  d_field_riemannpb_event_host(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, TrUserData);
      42 ->
	  d_field_riemannpb_event_description(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      F@_12, TrUserData);
      58 ->
	  d_field_riemannpb_event_tags(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, TrUserData);
      69 ->
	  d_field_riemannpb_event_ttl(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, TrUserData);
      74 ->
	  d_field_riemannpb_event_attributes(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11, F@_12,
					     TrUserData);
      80 ->
	  d_field_riemannpb_event_time_micros(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      F@_12, TrUserData);
      104 ->
	  d_field_riemannpb_event_metric_sint64(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, F@_9, F@_10, F@_11,
						F@_12, TrUserData);
      113 ->
	  d_field_riemannpb_event_metric_d(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, F@_10, F@_11, F@_12,
					   TrUserData);
      125 ->
	  d_field_riemannpb_event_metric_f(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, F@_10, F@_11, F@_12,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_riemannpb_event(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					    F@_9, F@_10, F@_11, F@_12,
					    TrUserData);
	    1 ->
		skip_64_riemannpb_event(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					F@_10, F@_11, F@_12, TrUserData);
	    2 ->
		skip_length_delimited_riemannpb_event(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      F@_6, F@_7, F@_8, F@_9,
						      F@_10, F@_11, F@_12,
						      TrUserData);
	    3 ->
		skip_group_riemannpb_event(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					   F@_8, F@_9, F@_10, F@_11, F@_12,
					   TrUserData);
	    5 ->
		skip_32_riemannpb_event(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					F@_10, F@_11, F@_12, TrUserData)
	  end
    end;
dg_read_field_def_riemannpb_event(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, R1, F@_7, R2, F@_9,
				  F@_10, F@_11, F@_12, TrUserData) ->
    #riemannpb_event{time = F@_1, state = F@_2,
		     service = F@_3, host = F@_4, description = F@_5,
		     tags = lists_reverse(R1, TrUserData), ttl = F@_7,
		     attributes = lists_reverse(R2, TrUserData),
		     time_micros = F@_9, metric_sint64 = F@_10,
		     metric_d = F@_11, metric_f = F@_12}.

d_field_riemannpb_event_time(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_riemannpb_event_time(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, TrUserData);
d_field_riemannpb_event_time(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_riemannpb_event(RestF, 0, 0,
				       NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6,
				       F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				       TrUserData).

d_field_riemannpb_event_state(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_riemannpb_event_state(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  TrUserData);
d_field_riemannpb_event_state(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_event(RestF, 0, 0, F@_1,
				       NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				       F@_8, F@_9, F@_10, F@_11, F@_12,
				       TrUserData).

d_field_riemannpb_event_service(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				TrUserData)
    when N < 57 ->
    d_field_riemannpb_event_service(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    TrUserData);
d_field_riemannpb_event_service(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_event(RestF, 0, 0, F@_1,
				       F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7,
				       F@_8, F@_9, F@_10, F@_11, F@_12,
				       TrUserData).

d_field_riemannpb_event_host(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_riemannpb_event_host(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, TrUserData);
d_field_riemannpb_event_host(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_event(RestF, 0, 0, F@_1,
				       F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7,
				       F@_8, F@_9, F@_10, F@_11, F@_12,
				       TrUserData).

d_field_riemannpb_event_description(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    TrUserData)
    when N < 57 ->
    d_field_riemannpb_event_description(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, F@_12, TrUserData);
d_field_riemannpb_event_description(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_event(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7,
				       F@_8, F@_9, F@_10, F@_11, F@_12,
				       TrUserData).

d_field_riemannpb_event_tags(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_riemannpb_event_tags(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, TrUserData);
d_field_riemannpb_event_tags(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_event(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5,
				       cons(NewFValue, Prev, TrUserData), F@_7,
				       F@_8, F@_9, F@_10, F@_11, F@_12,
				       TrUserData).

d_field_riemannpb_event_ttl(<<0:16, 128, 127,
			      Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
			    F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       id(infinity, TrUserData), F@_8, F@_9,
				       F@_10, F@_11, F@_12, TrUserData);
d_field_riemannpb_event_ttl(<<0:16, 128, 255,
			      Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
			    F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       id('-infinity', TrUserData), F@_8, F@_9,
				       F@_10, F@_11, F@_12, TrUserData);
d_field_riemannpb_event_ttl(<<_:16, 1:1, _:7, _:1,
			      127:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
			    F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       id(nan, TrUserData), F@_8, F@_9, F@_10,
				       F@_11, F@_12, TrUserData);
d_field_riemannpb_event_ttl(<<Value:32/little-float,
			      Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
			    F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       id(Value, TrUserData), F@_8, F@_9, F@_10,
				       F@_11, F@_12, TrUserData).

d_field_riemannpb_event_attributes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   TrUserData)
    when N < 57 ->
    d_field_riemannpb_event_attributes(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, F@_12, TrUserData);
d_field_riemannpb_event_attributes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, Prev, F@_9, F@_10, F@_11, F@_12,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_riemannpb_attribute(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_riemannpb_event(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				       cons(NewFValue, Prev, TrUserData), F@_9,
				       F@_10, F@_11, F@_12, TrUserData).

d_field_riemannpb_event_time_micros(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    TrUserData)
    when N < 57 ->
    d_field_riemannpb_event_time_micros(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, F@_12, TrUserData);
d_field_riemannpb_event_time_micros(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, _, F@_10, F@_11, F@_12,
				    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_riemannpb_event(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       NewFValue, F@_10, F@_11, F@_12,
				       TrUserData).

d_field_riemannpb_event_metric_sint64(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, TrUserData)
    when N < 57 ->
    d_field_riemannpb_event_metric_sint64(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					  F@_11, F@_12, TrUserData);
d_field_riemannpb_event_metric_sint64(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12,
				      TrUserData) ->
    {NewFValue, RestF} = {begin
			    ZValue = X bsl N + Acc,
			    if ZValue band 1 =:= 0 ->
				   id(ZValue bsr 1, {var, 1003, TrUserData});
			       true ->
				   id(-(ZValue + 1 bsr 1),
				      {var, 1003, TrUserData})
			    end
			  end,
			  Rest},
    dfp_read_field_def_riemannpb_event(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, NewFValue, F@_11, F@_12,
				       TrUserData).

d_field_riemannpb_event_metric_d(<<0:48, 240, 127,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, _, F@_12,
				 TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, id(infinity, TrUserData),
				       F@_12, TrUserData);
d_field_riemannpb_event_metric_d(<<0:48, 240, 255,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, _, F@_12,
				 TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, id('-infinity', TrUserData),
				       F@_12, TrUserData);
d_field_riemannpb_event_metric_d(<<_:48, 15:4, _:4, _:1,
				   127:7, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, _, F@_12,
				 TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, id(nan, TrUserData), F@_12,
				       TrUserData);
d_field_riemannpb_event_metric_d(<<Value:64/little-float,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, _, F@_12,
				 TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, id(Value, TrUserData),
				       F@_12, TrUserData).

d_field_riemannpb_event_metric_f(<<0:16, 128, 127,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, _,
				 TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11,
				       id(infinity, TrUserData), TrUserData);
d_field_riemannpb_event_metric_f(<<0:16, 128, 255,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, _,
				 TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11,
				       id('-infinity', TrUserData), TrUserData);
d_field_riemannpb_event_metric_f(<<_:16, 1:1, _:7, _:1,
				   127:7, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, _,
				 TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, id(nan, TrUserData),
				       TrUserData);
d_field_riemannpb_event_metric_f(<<Value:32/little-float,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, _,
				 TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11,
				       id(Value, TrUserData), TrUserData).

skip_varint_riemannpb_event(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    skip_varint_riemannpb_event(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, TrUserData);
skip_varint_riemannpb_event(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, F@_12, TrUserData).

skip_length_delimited_riemannpb_event(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, TrUserData)
    when N < 57 ->
    skip_length_delimited_riemannpb_event(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					  F@_11, F@_12, TrUserData);
skip_length_delimited_riemannpb_event(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_riemannpb_event(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, F@_12, TrUserData).

skip_group_riemannpb_event(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			   F@_11, F@_12, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_riemannpb_event(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, F@_12, TrUserData).

skip_32_riemannpb_event(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, F@_12, TrUserData).

skip_64_riemannpb_event(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_riemannpb_event(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, F@_12, TrUserData).

decode_msg_riemannpb_query(Bin, TrUserData) ->
    dfp_read_field_def_riemannpb_query(Bin, 0, 0,
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_riemannpb_query(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_riemannpb_query_string(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_riemannpb_query(<<>>, 0, 0, F@_1,
				   _) ->
    #riemannpb_query{string = F@_1};
dfp_read_field_def_riemannpb_query(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_riemannpb_query(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_riemannpb_query(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_riemannpb_query(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_riemannpb_query(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_riemannpb_query_string(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_riemannpb_query(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_riemannpb_query(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_riemannpb_query(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_riemannpb_query(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_riemannpb_query(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_riemannpb_query(<<>>, 0, 0, F@_1,
				  _) ->
    #riemannpb_query{string = F@_1}.

d_field_riemannpb_query_string(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_riemannpb_query_string(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_riemannpb_query_string(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_query(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_riemannpb_query(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_riemannpb_query(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_riemannpb_query(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_riemannpb_query(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_riemannpb_query(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_riemannpb_query(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_riemannpb_query(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_riemannpb_query(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_riemannpb_query(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_riemannpb_query(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_riemannpb_query(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_riemannpb_query(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_riemannpb_query(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_riemannpb_query(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_riemannpb_msg(Bin, TrUserData) ->
    dfp_read_field_def_riemannpb_msg(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id([], TrUserData),
				     id(undefined, TrUserData),
				     id([], TrUserData), TrUserData).

dfp_read_field_def_riemannpb_msg(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_riemannpb_msg_ok(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_riemannpb_msg(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_riemannpb_msg_error(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_riemannpb_msg(<<34, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_riemannpb_msg_states(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_riemannpb_msg(<<42, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_riemannpb_msg_query(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_riemannpb_msg(<<50, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_riemannpb_msg_events(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_riemannpb_msg(<<>>, 0, 0, F@_1, F@_2,
				 R1, F@_4, R2, TrUserData) ->
    #riemannpb_msg{ok = F@_1, error = F@_2,
		   states = lists_reverse(R1, TrUserData), query = F@_4,
		   events = lists_reverse(R2, TrUserData)};
dfp_read_field_def_riemannpb_msg(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_riemannpb_msg(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_riemannpb_msg(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_riemannpb_msg(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
dg_read_field_def_riemannpb_msg(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      16 ->
	  d_field_riemannpb_msg_ok(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      26 ->
	  d_field_riemannpb_msg_error(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_riemannpb_msg_states(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_riemannpb_msg_query(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      50 ->
	  d_field_riemannpb_msg_events(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_riemannpb_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_riemannpb_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_riemannpb_msg(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
	    3 ->
		skip_group_riemannpb_msg(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_riemannpb_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_riemannpb_msg(<<>>, 0, 0, F@_1, F@_2,
				R1, F@_4, R2, TrUserData) ->
    #riemannpb_msg{ok = F@_1, error = F@_2,
		   states = lists_reverse(R1, TrUserData), query = F@_4,
		   events = lists_reverse(R2, TrUserData)}.

d_field_riemannpb_msg_ok(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_riemannpb_msg_ok(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_riemannpb_msg_ok(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_riemannpb_msg(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_riemannpb_msg_error(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_riemannpb_msg_error(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_riemannpb_msg_error(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_msg(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_riemannpb_msg_states(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_riemannpb_msg_states(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_riemannpb_msg_states(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_riemannpb_state(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_riemannpb_msg(RestF, 0, 0, F@_1,
				     F@_2, cons(NewFValue, Prev, TrUserData),
				     F@_4, F@_5, TrUserData).

d_field_riemannpb_msg_query(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_riemannpb_msg_query(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_riemannpb_msg_query(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_riemannpb_query(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_riemannpb_msg(RestF, 0, 0, F@_1,
				     F@_2, F@_3,
				     if Prev == undefined -> NewFValue;
					true ->
					    merge_msg_riemannpb_query(Prev,
								      NewFValue,
								      TrUserData)
				     end,
				     F@_5, TrUserData).

d_field_riemannpb_msg_events(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_riemannpb_msg_events(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_riemannpb_msg_events(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, Prev,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_riemannpb_event(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_riemannpb_msg(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4,
				     cons(NewFValue, Prev, TrUserData),
				     TrUserData).

skip_varint_riemannpb_msg(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_riemannpb_msg(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
skip_varint_riemannpb_msg(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_riemannpb_msg(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_riemannpb_msg(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    skip_length_delimited_riemannpb_msg(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
skip_length_delimited_riemannpb_msg(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_riemannpb_msg(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_riemannpb_msg(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_riemannpb_msg(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_riemannpb_msg(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_riemannpb_msg(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_riemannpb_msg(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_riemannpb_msg(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_riemannpb_attribute(Bin, TrUserData) ->
    dfp_read_field_def_riemannpb_attribute(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_riemannpb_attribute(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_riemannpb_attribute_key(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_riemannpb_attribute(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_riemannpb_attribute_value(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_riemannpb_attribute(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #riemannpb_attribute{key = F@_1, value = F@_2};
dfp_read_field_def_riemannpb_attribute(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_riemannpb_attribute(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_riemannpb_attribute(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_riemannpb_attribute(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_riemannpb_attribute(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_riemannpb_attribute_key(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      18 ->
	  d_field_riemannpb_attribute_value(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_riemannpb_attribute(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_riemannpb_attribute(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_riemannpb_attribute(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_riemannpb_attribute(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_riemannpb_attribute(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_riemannpb_attribute(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #riemannpb_attribute{key = F@_1, value = F@_2}.

d_field_riemannpb_attribute_key(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_riemannpb_attribute_key(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_riemannpb_attribute_key(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_attribute(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

d_field_riemannpb_attribute_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_riemannpb_attribute_value(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_riemannpb_attribute_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_riemannpb_attribute(RestF, 0, 0,
					   F@_1, NewFValue, TrUserData).

skip_varint_riemannpb_attribute(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_riemannpb_attribute(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_riemannpb_attribute(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_riemannpb_attribute(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_riemannpb_attribute(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_riemannpb_attribute(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_riemannpb_attribute(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_riemannpb_attribute(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_riemannpb_attribute(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_riemannpb_attribute(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_riemannpb_attribute(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_riemannpb_attribute(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_riemannpb_attribute(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_riemannpb_attribute(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      riemannpb_state ->
	  merge_msg_riemannpb_state(Prev, New, TrUserData);
      riemannpb_event ->
	  merge_msg_riemannpb_event(Prev, New, TrUserData);
      riemannpb_query ->
	  merge_msg_riemannpb_query(Prev, New, TrUserData);
      riemannpb_msg ->
	  merge_msg_riemannpb_msg(Prev, New, TrUserData);
      riemannpb_attribute ->
	  merge_msg_riemannpb_attribute(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_riemannpb_state/3}).
merge_msg_riemannpb_state(#riemannpb_state{time =
					       PFtime,
					   state = PFstate, service = PFservice,
					   host = PFhost,
					   description = PFdescription,
					   once = PFonce, tags = PFtags,
					   ttl = PFttl},
			  #riemannpb_state{time = NFtime, state = NFstate,
					   service = NFservice, host = NFhost,
					   description = NFdescription,
					   once = NFonce, tags = NFtags,
					   ttl = NFttl},
			  TrUserData) ->
    #riemannpb_state{time =
			 if NFtime =:= undefined -> PFtime;
			    true -> NFtime
			 end,
		     state =
			 if NFstate =:= undefined -> PFstate;
			    true -> NFstate
			 end,
		     service =
			 if NFservice =:= undefined -> PFservice;
			    true -> NFservice
			 end,
		     host =
			 if NFhost =:= undefined -> PFhost;
			    true -> NFhost
			 end,
		     description =
			 if NFdescription =:= undefined -> PFdescription;
			    true -> NFdescription
			 end,
		     once =
			 if NFonce =:= undefined -> PFonce;
			    true -> NFonce
			 end,
		     tags =
			 if PFtags /= undefined, NFtags /= undefined ->
				'erlang_++'(PFtags, NFtags, TrUserData);
			    PFtags == undefined -> NFtags;
			    NFtags == undefined -> PFtags
			 end,
		     ttl =
			 if NFttl =:= undefined -> PFttl;
			    true -> NFttl
			 end}.

-compile({nowarn_unused_function,merge_msg_riemannpb_event/3}).
merge_msg_riemannpb_event(#riemannpb_event{time =
					       PFtime,
					   state = PFstate, service = PFservice,
					   host = PFhost,
					   description = PFdescription,
					   tags = PFtags, ttl = PFttl,
					   attributes = PFattributes,
					   time_micros = PFtime_micros,
					   metric_sint64 = PFmetric_sint64,
					   metric_d = PFmetric_d,
					   metric_f = PFmetric_f},
			  #riemannpb_event{time = NFtime, state = NFstate,
					   service = NFservice, host = NFhost,
					   description = NFdescription,
					   tags = NFtags, ttl = NFttl,
					   attributes = NFattributes,
					   time_micros = NFtime_micros,
					   metric_sint64 = NFmetric_sint64,
					   metric_d = NFmetric_d,
					   metric_f = NFmetric_f},
			  TrUserData) ->
    #riemannpb_event{time =
			 if NFtime =:= undefined -> PFtime;
			    true -> NFtime
			 end,
		     state =
			 if NFstate =:= undefined -> PFstate;
			    true -> NFstate
			 end,
		     service =
			 if NFservice =:= undefined -> PFservice;
			    true -> NFservice
			 end,
		     host =
			 if NFhost =:= undefined -> PFhost;
			    true -> NFhost
			 end,
		     description =
			 if NFdescription =:= undefined -> PFdescription;
			    true -> NFdescription
			 end,
		     tags =
			 if PFtags /= undefined, NFtags /= undefined ->
				'erlang_++'(PFtags, NFtags, TrUserData);
			    PFtags == undefined -> NFtags;
			    NFtags == undefined -> PFtags
			 end,
		     ttl =
			 if NFttl =:= undefined -> PFttl;
			    true -> NFttl
			 end,
		     attributes =
			 if PFattributes /= undefined,
			    NFattributes /= undefined ->
				'erlang_++'(PFattributes, NFattributes,
					    TrUserData);
			    PFattributes == undefined -> NFattributes;
			    NFattributes == undefined -> PFattributes
			 end,
		     time_micros =
			 if NFtime_micros =:= undefined -> PFtime_micros;
			    true -> NFtime_micros
			 end,
		     metric_sint64 =
			 if NFmetric_sint64 =:= undefined -> PFmetric_sint64;
			    true -> NFmetric_sint64
			 end,
		     metric_d =
			 if NFmetric_d =:= undefined -> PFmetric_d;
			    true -> NFmetric_d
			 end,
		     metric_f =
			 if NFmetric_f =:= undefined -> PFmetric_f;
			    true -> NFmetric_f
			 end}.

-compile({nowarn_unused_function,merge_msg_riemannpb_query/3}).
merge_msg_riemannpb_query(#riemannpb_query{string =
					       PFstring},
			  #riemannpb_query{string = NFstring}, _) ->
    #riemannpb_query{string =
			 if NFstring =:= undefined -> PFstring;
			    true -> NFstring
			 end}.

-compile({nowarn_unused_function,merge_msg_riemannpb_msg/3}).
merge_msg_riemannpb_msg(#riemannpb_msg{ok = PFok,
				       error = PFerror, states = PFstates,
				       query = PFquery, events = PFevents},
			#riemannpb_msg{ok = NFok, error = NFerror,
				       states = NFstates, query = NFquery,
				       events = NFevents},
			TrUserData) ->
    #riemannpb_msg{ok =
		       if NFok =:= undefined -> PFok;
			  true -> NFok
		       end,
		   error =
		       if NFerror =:= undefined -> PFerror;
			  true -> NFerror
		       end,
		   states =
		       if PFstates /= undefined, NFstates /= undefined ->
			      'erlang_++'(PFstates, NFstates, TrUserData);
			  PFstates == undefined -> NFstates;
			  NFstates == undefined -> PFstates
		       end,
		   query =
		       if PFquery /= undefined, NFquery /= undefined ->
			      merge_msg_riemannpb_query(PFquery, NFquery,
							TrUserData);
			  PFquery == undefined -> NFquery;
			  NFquery == undefined -> PFquery
		       end,
		   events =
		       if PFevents /= undefined, NFevents /= undefined ->
			      'erlang_++'(PFevents, NFevents, TrUserData);
			  PFevents == undefined -> NFevents;
			  NFevents == undefined -> PFevents
		       end}.

-compile({nowarn_unused_function,merge_msg_riemannpb_attribute/3}).
merge_msg_riemannpb_attribute(#riemannpb_attribute{value
						       = PFvalue},
			      #riemannpb_attribute{key = NFkey,
						   value = NFvalue},
			      _) ->
    #riemannpb_attribute{key = NFkey,
			 value =
			     if NFvalue =:= undefined -> PFvalue;
				true -> NFvalue
			     end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      riemannpb_state ->
	  v_msg_riemannpb_state(Msg, [MsgName], TrUserData);
      riemannpb_event ->
	  v_msg_riemannpb_event(Msg, [MsgName], TrUserData);
      riemannpb_query ->
	  v_msg_riemannpb_query(Msg, [MsgName], TrUserData);
      riemannpb_msg ->
	  v_msg_riemannpb_msg(Msg, [MsgName], TrUserData);
      riemannpb_attribute ->
	  v_msg_riemannpb_attribute(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_riemannpb_state/3}).
-dialyzer({nowarn_function,v_msg_riemannpb_state/3}).
v_msg_riemannpb_state(#riemannpb_state{time = F1,
				       state = F2, service = F3, host = F4,
				       description = F5, once = F6, tags = F7,
				       ttl = F8},
		      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [time | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [state | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [service | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [host | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, [description | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [once | Path], TrUserData)
    end,
    if is_list(F7) ->
	   _ = [v_type_string(Elem, [tags | Path], TrUserData)
		|| Elem <- F7],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F7,
			 [tags | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_float(F8, [ttl | Path], TrUserData)
    end,
    ok;
v_msg_riemannpb_state(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, riemannpb_state}, X, Path).

-compile({nowarn_unused_function,v_msg_riemannpb_event/3}).
-dialyzer({nowarn_function,v_msg_riemannpb_event/3}).
v_msg_riemannpb_event(#riemannpb_event{time = F1,
				       state = F2, service = F3, host = F4,
				       description = F5, tags = F6, ttl = F7,
				       attributes = F8, time_micros = F9,
				       metric_sint64 = F10, metric_d = F11,
				       metric_f = F12},
		      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [time | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [state | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [service | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [host | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, [description | Path], TrUserData)
    end,
    if is_list(F6) ->
	   _ = [v_type_string(Elem, [tags | Path], TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F6,
			 [tags | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_float(F7, [ttl | Path], TrUserData)
    end,
    if is_list(F8) ->
	   _ = [v_msg_riemannpb_attribute(Elem,
					  [attributes | Path], TrUserData)
		|| Elem <- F8],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, riemannpb_attribute}},
			 F8, [attributes | Path])
    end,
    if F9 == undefined -> ok;
       true ->
	   v_type_int64(F9, [time_micros | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
	   v_type_sint64(F10, [metric_sint64 | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true ->
	   v_type_double(F11, [metric_d | Path], TrUserData)
    end,
    if F12 == undefined -> ok;
       true -> v_type_float(F12, [metric_f | Path], TrUserData)
    end,
    ok;
v_msg_riemannpb_event(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, riemannpb_event}, X, Path).

-compile({nowarn_unused_function,v_msg_riemannpb_query/3}).
-dialyzer({nowarn_function,v_msg_riemannpb_query/3}).
v_msg_riemannpb_query(#riemannpb_query{string = F1},
		      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [string | Path], TrUserData)
    end,
    ok;
v_msg_riemannpb_query(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, riemannpb_query}, X, Path).

-compile({nowarn_unused_function,v_msg_riemannpb_msg/3}).
-dialyzer({nowarn_function,v_msg_riemannpb_msg/3}).
v_msg_riemannpb_msg(#riemannpb_msg{ok = F1, error = F2,
				   states = F3, query = F4, events = F5},
		    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [ok | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [error | Path], TrUserData)
    end,
    if is_list(F3) ->
	   _ = [v_msg_riemannpb_state(Elem, [states | Path],
				      TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, riemannpb_state}},
			 F3, [states | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_riemannpb_query(F4, [query | Path], TrUserData)
    end,
    if is_list(F5) ->
	   _ = [v_msg_riemannpb_event(Elem, [events | Path],
				      TrUserData)
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, riemannpb_event}},
			 F5, [events | Path])
    end,
    ok;
v_msg_riemannpb_msg(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, riemannpb_msg}, X, Path).

-compile({nowarn_unused_function,v_msg_riemannpb_attribute/3}).
-dialyzer({nowarn_function,v_msg_riemannpb_attribute/3}).
v_msg_riemannpb_attribute(#riemannpb_attribute{key = F1,
					       value = F2},
			  Path, TrUserData) ->
    v_type_string(F1, [key | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [value | Path], TrUserData)
    end,
    ok;
v_msg_riemannpb_attribute(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, riemannpb_attribute}, X,
		  Path).

-compile({nowarn_unused_function,v_type_sint64/3}).
-dialyzer({nowarn_function,v_type_sint64/3}).
v_type_sint64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_sint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint64, signed, 64},
		  N, Path);
v_type_sint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, riemannpb_state},
      [#field{name = time, fnum = 1, rnum = 2, type = int64,
	      occurrence = optional, opts = []},
       #field{name = state, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = service, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = host, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = description, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = once, fnum = 6, rnum = 7, type = bool,
	      occurrence = optional, opts = []},
       #field{name = tags, fnum = 7, rnum = 8, type = string,
	      occurrence = repeated, opts = []},
       #field{name = ttl, fnum = 8, rnum = 9, type = float,
	      occurrence = optional, opts = []}]},
     {{msg, riemannpb_event},
      [#field{name = time, fnum = 1, rnum = 2, type = int64,
	      occurrence = optional, opts = []},
       #field{name = state, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = service, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = host, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = description, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = tags, fnum = 7, rnum = 7, type = string,
	      occurrence = repeated, opts = []},
       #field{name = ttl, fnum = 8, rnum = 8, type = float,
	      occurrence = optional, opts = []},
       #field{name = attributes, fnum = 9, rnum = 9,
	      type = {msg, riemannpb_attribute},
	      occurrence = repeated, opts = []},
       #field{name = time_micros, fnum = 10, rnum = 10,
	      type = int64, occurrence = optional, opts = []},
       #field{name = metric_sint64, fnum = 13, rnum = 11,
	      type = sint64, occurrence = optional, opts = []},
       #field{name = metric_d, fnum = 14, rnum = 12,
	      type = double, occurrence = optional, opts = []},
       #field{name = metric_f, fnum = 15, rnum = 13,
	      type = float, occurrence = optional, opts = []}]},
     {{msg, riemannpb_query},
      [#field{name = string, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, riemannpb_msg},
      [#field{name = ok, fnum = 2, rnum = 2, type = bool,
	      occurrence = optional, opts = []},
       #field{name = error, fnum = 3, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = states, fnum = 4, rnum = 4,
	      type = {msg, riemannpb_state}, occurrence = repeated,
	      opts = []},
       #field{name = query, fnum = 5, rnum = 5,
	      type = {msg, riemannpb_query}, occurrence = optional,
	      opts = []},
       #field{name = events, fnum = 6, rnum = 6,
	      type = {msg, riemannpb_event}, occurrence = repeated,
	      opts = []}]},
     {{msg, riemannpb_attribute},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    [riemannpb_state, riemannpb_event, riemannpb_query,
     riemannpb_msg, riemannpb_attribute].


get_group_names() -> [].


get_msg_or_group_names() ->
    [riemannpb_state, riemannpb_event, riemannpb_query,
     riemannpb_msg, riemannpb_attribute].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(riemannpb_state) ->
    [#field{name = time, fnum = 1, rnum = 2, type = int64,
	    occurrence = optional, opts = []},
     #field{name = state, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = service, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = host, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = description, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = once, fnum = 6, rnum = 7, type = bool,
	    occurrence = optional, opts = []},
     #field{name = tags, fnum = 7, rnum = 8, type = string,
	    occurrence = repeated, opts = []},
     #field{name = ttl, fnum = 8, rnum = 9, type = float,
	    occurrence = optional, opts = []}];
find_msg_def(riemannpb_event) ->
    [#field{name = time, fnum = 1, rnum = 2, type = int64,
	    occurrence = optional, opts = []},
     #field{name = state, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = service, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = host, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = description, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = tags, fnum = 7, rnum = 7, type = string,
	    occurrence = repeated, opts = []},
     #field{name = ttl, fnum = 8, rnum = 8, type = float,
	    occurrence = optional, opts = []},
     #field{name = attributes, fnum = 9, rnum = 9,
	    type = {msg, riemannpb_attribute},
	    occurrence = repeated, opts = []},
     #field{name = time_micros, fnum = 10, rnum = 10,
	    type = int64, occurrence = optional, opts = []},
     #field{name = metric_sint64, fnum = 13, rnum = 11,
	    type = sint64, occurrence = optional, opts = []},
     #field{name = metric_d, fnum = 14, rnum = 12,
	    type = double, occurrence = optional, opts = []},
     #field{name = metric_f, fnum = 15, rnum = 13,
	    type = float, occurrence = optional, opts = []}];
find_msg_def(riemannpb_query) ->
    [#field{name = string, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(riemannpb_msg) ->
    [#field{name = ok, fnum = 2, rnum = 2, type = bool,
	    occurrence = optional, opts = []},
     #field{name = error, fnum = 3, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = states, fnum = 4, rnum = 4,
	    type = {msg, riemannpb_state}, occurrence = repeated,
	    opts = []},
     #field{name = query, fnum = 5, rnum = 5,
	    type = {msg, riemannpb_query}, occurrence = optional,
	    opts = []},
     #field{name = events, fnum = 6, rnum = 6,
	    type = {msg, riemannpb_event}, occurrence = repeated,
	    opts = []}];
find_msg_def(riemannpb_attribute) ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "katja.proto".



gpb_version_as_string() ->
    "4.6.0".

gpb_version_as_list() ->
    [4,6,0].
